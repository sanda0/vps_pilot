// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: node.sql

package db

import (
	"context"
	"database/sql"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (name, ip, cpu_cores, cpu_ghz, memory, disk)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, ip, cpu_cores, cpu_ghz, memory, disk, created_at, updated_at
`

type CreateNodeParams struct {
	Name     sql.NullString  `json:"name"`
	Ip       string          `json:"ip"`
	CpuCores int32           `json:"cpu_cores"`
	CpuGhz   sql.NullFloat64 `json:"cpu_ghz"`
	Memory   sql.NullInt32   `json:"memory"`
	Disk     sql.NullInt32   `json:"disk"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.queryRow(ctx, q.createNodeStmt, createNode,
		arg.Name,
		arg.Ip,
		arg.CpuCores,
		arg.CpuGhz,
		arg.Memory,
		arg.Disk,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.CpuCores,
		&i.CpuGhz,
		&i.Memory,
		&i.Disk,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :execrows
DELETE FROM nodes
WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteNodeStmt, deleteNode, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getNode = `-- name: GetNode :one
SELECT id, name, ip, cpu_cores, cpu_ghz, memory, disk, created_at, updated_at
FROM nodes
WHERE id = $1
`

func (q *Queries) GetNode(ctx context.Context, id int32) (Node, error) {
	row := q.queryRow(ctx, q.getNodeStmt, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.CpuCores,
		&i.CpuGhz,
		&i.Memory,
		&i.Disk,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodes = `-- name: GetNodes :many
SELECT id, name, ip, cpu_cores, cpu_ghz, memory, disk, created_at, updated_at
FROM nodes
LIMIT $1 OFFSET $2
`

type GetNodesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetNodes(ctx context.Context, arg GetNodesParams) ([]Node, error) {
	rows, err := q.query(ctx, q.getNodesStmt, getNodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ip,
			&i.CpuCores,
			&i.CpuGhz,
			&i.Memory,
			&i.Disk,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNode = `-- name: UpdateNode :one
UPDATE nodes
SET name = $1,
  ip = $2,
  cpu_cores = $3,
  cpu_ghz = $4,
  memory = $5,
  disk = $6,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $7
RETURNING id, name, ip, cpu_cores, cpu_ghz, memory, disk, created_at, updated_at
`

type UpdateNodeParams struct {
	Name     sql.NullString  `json:"name"`
	Ip       string          `json:"ip"`
	CpuCores int32           `json:"cpu_cores"`
	CpuGhz   sql.NullFloat64 `json:"cpu_ghz"`
	Memory   sql.NullInt32   `json:"memory"`
	Disk     sql.NullInt32   `json:"disk"`
	ID       int32           `json:"id"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Node, error) {
	row := q.queryRow(ctx, q.updateNodeStmt, updateNode,
		arg.Name,
		arg.Ip,
		arg.CpuCores,
		arg.CpuGhz,
		arg.Memory,
		arg.Disk,
		arg.ID,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ip,
		&i.CpuCores,
		&i.CpuGhz,
		&i.Memory,
		&i.Disk,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
