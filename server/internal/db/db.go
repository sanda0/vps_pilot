// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.activateAlertStmt, err = db.PrepareContext(ctx, activateAlert); err != nil {
		return nil, fmt.Errorf("error preparing query ActivateAlert: %w", err)
	}
	if q.addNodeDiskInfoStmt, err = db.PrepareContext(ctx, addNodeDiskInfo); err != nil {
		return nil, fmt.Errorf("error preparing query AddNodeDiskInfo: %w", err)
	}
	if q.addNodeSysInfoStmt, err = db.PrepareContext(ctx, addNodeSysInfo); err != nil {
		return nil, fmt.Errorf("error preparing query AddNodeSysInfo: %w", err)
	}
	if q.createAlertStmt, err = db.PrepareContext(ctx, createAlert); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAlert: %w", err)
	}
	if q.createNodeStmt, err = db.PrepareContext(ctx, createNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNode: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deactivateAlertStmt, err = db.PrepareContext(ctx, deactivateAlert); err != nil {
		return nil, fmt.Errorf("error preparing query DeactivateAlert: %w", err)
	}
	if q.deleteAlertStmt, err = db.PrepareContext(ctx, deleteAlert); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAlert: %w", err)
	}
	if q.deleteNodeStmt, err = db.PrepareContext(ctx, deleteNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNode: %w", err)
	}
	if q.findUserByEmailStmt, err = db.PrepareContext(ctx, findUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByEmail: %w", err)
	}
	if q.findUserByIdStmt, err = db.PrepareContext(ctx, findUserById); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserById: %w", err)
	}
	if q.getActiveAlertsByNodeAndMetricStmt, err = db.PrepareContext(ctx, getActiveAlertsByNodeAndMetric); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveAlertsByNodeAndMetric: %w", err)
	}
	if q.getAlertStmt, err = db.PrepareContext(ctx, getAlert); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlert: %w", err)
	}
	if q.getAlertsStmt, err = db.PrepareContext(ctx, getAlerts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlerts: %w", err)
	}
	if q.getNetStatsStmt, err = db.PrepareContext(ctx, getNetStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetNetStats: %w", err)
	}
	if q.getNodeStmt, err = db.PrepareContext(ctx, getNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetNode: %w", err)
	}
	if q.getNodeByIPStmt, err = db.PrepareContext(ctx, getNodeByIP); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeByIP: %w", err)
	}
	if q.getNodeDiskInfoByNodeIDStmt, err = db.PrepareContext(ctx, getNodeDiskInfoByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeDiskInfoByNodeID: %w", err)
	}
	if q.getNodeSysInfoByNodeIDStmt, err = db.PrepareContext(ctx, getNodeSysInfoByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeSysInfoByNodeID: %w", err)
	}
	if q.getNodeWithSysInfoStmt, err = db.PrepareContext(ctx, getNodeWithSysInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeWithSysInfo: %w", err)
	}
	if q.getNodesStmt, err = db.PrepareContext(ctx, getNodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodes: %w", err)
	}
	if q.getNodesWithSysInfoStmt, err = db.PrepareContext(ctx, getNodesWithSysInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodesWithSysInfo: %w", err)
	}
	if q.getSystemStatsStmt, err = db.PrepareContext(ctx, getSystemStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemStats: %w", err)
	}
	if q.insertNetStatsStmt, err = db.PrepareContext(ctx, insertNetStats); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNetStats: %w", err)
	}
	if q.insertSystemStatsStmt, err = db.PrepareContext(ctx, insertSystemStats); err != nil {
		return nil, fmt.Errorf("error preparing query InsertSystemStats: %w", err)
	}
	if q.updateAlertStmt, err = db.PrepareContext(ctx, updateAlert); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAlert: %w", err)
	}
	if q.updateNodeStmt, err = db.PrepareContext(ctx, updateNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNode: %w", err)
	}
	if q.updateNodeDiskInfoStmt, err = db.PrepareContext(ctx, updateNodeDiskInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeDiskInfo: %w", err)
	}
	if q.updateNodeNameStmt, err = db.PrepareContext(ctx, updateNodeName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeName: %w", err)
	}
	if q.updateNodeSysInfoStmt, err = db.PrepareContext(ctx, updateNodeSysInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNodeSysInfo: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.activateAlertStmt != nil {
		if cerr := q.activateAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing activateAlertStmt: %w", cerr)
		}
	}
	if q.addNodeDiskInfoStmt != nil {
		if cerr := q.addNodeDiskInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNodeDiskInfoStmt: %w", cerr)
		}
	}
	if q.addNodeSysInfoStmt != nil {
		if cerr := q.addNodeSysInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNodeSysInfoStmt: %w", cerr)
		}
	}
	if q.createAlertStmt != nil {
		if cerr := q.createAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAlertStmt: %w", cerr)
		}
	}
	if q.createNodeStmt != nil {
		if cerr := q.createNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNodeStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deactivateAlertStmt != nil {
		if cerr := q.deactivateAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deactivateAlertStmt: %w", cerr)
		}
	}
	if q.deleteAlertStmt != nil {
		if cerr := q.deleteAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAlertStmt: %w", cerr)
		}
	}
	if q.deleteNodeStmt != nil {
		if cerr := q.deleteNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeStmt: %w", cerr)
		}
	}
	if q.findUserByEmailStmt != nil {
		if cerr := q.findUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByEmailStmt: %w", cerr)
		}
	}
	if q.findUserByIdStmt != nil {
		if cerr := q.findUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByIdStmt: %w", cerr)
		}
	}
	if q.getActiveAlertsByNodeAndMetricStmt != nil {
		if cerr := q.getActiveAlertsByNodeAndMetricStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveAlertsByNodeAndMetricStmt: %w", cerr)
		}
	}
	if q.getAlertStmt != nil {
		if cerr := q.getAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlertStmt: %w", cerr)
		}
	}
	if q.getAlertsStmt != nil {
		if cerr := q.getAlertsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlertsStmt: %w", cerr)
		}
	}
	if q.getNetStatsStmt != nil {
		if cerr := q.getNetStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNetStatsStmt: %w", cerr)
		}
	}
	if q.getNodeStmt != nil {
		if cerr := q.getNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeStmt: %w", cerr)
		}
	}
	if q.getNodeByIPStmt != nil {
		if cerr := q.getNodeByIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeByIPStmt: %w", cerr)
		}
	}
	if q.getNodeDiskInfoByNodeIDStmt != nil {
		if cerr := q.getNodeDiskInfoByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeDiskInfoByNodeIDStmt: %w", cerr)
		}
	}
	if q.getNodeSysInfoByNodeIDStmt != nil {
		if cerr := q.getNodeSysInfoByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeSysInfoByNodeIDStmt: %w", cerr)
		}
	}
	if q.getNodeWithSysInfoStmt != nil {
		if cerr := q.getNodeWithSysInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeWithSysInfoStmt: %w", cerr)
		}
	}
	if q.getNodesStmt != nil {
		if cerr := q.getNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodesStmt: %w", cerr)
		}
	}
	if q.getNodesWithSysInfoStmt != nil {
		if cerr := q.getNodesWithSysInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodesWithSysInfoStmt: %w", cerr)
		}
	}
	if q.getSystemStatsStmt != nil {
		if cerr := q.getSystemStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemStatsStmt: %w", cerr)
		}
	}
	if q.insertNetStatsStmt != nil {
		if cerr := q.insertNetStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNetStatsStmt: %w", cerr)
		}
	}
	if q.insertSystemStatsStmt != nil {
		if cerr := q.insertSystemStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertSystemStatsStmt: %w", cerr)
		}
	}
	if q.updateAlertStmt != nil {
		if cerr := q.updateAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAlertStmt: %w", cerr)
		}
	}
	if q.updateNodeStmt != nil {
		if cerr := q.updateNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeStmt: %w", cerr)
		}
	}
	if q.updateNodeDiskInfoStmt != nil {
		if cerr := q.updateNodeDiskInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeDiskInfoStmt: %w", cerr)
		}
	}
	if q.updateNodeNameStmt != nil {
		if cerr := q.updateNodeNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeNameStmt: %w", cerr)
		}
	}
	if q.updateNodeSysInfoStmt != nil {
		if cerr := q.updateNodeSysInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeSysInfoStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	activateAlertStmt                  *sql.Stmt
	addNodeDiskInfoStmt                *sql.Stmt
	addNodeSysInfoStmt                 *sql.Stmt
	createAlertStmt                    *sql.Stmt
	createNodeStmt                     *sql.Stmt
	createUserStmt                     *sql.Stmt
	deactivateAlertStmt                *sql.Stmt
	deleteAlertStmt                    *sql.Stmt
	deleteNodeStmt                     *sql.Stmt
	findUserByEmailStmt                *sql.Stmt
	findUserByIdStmt                   *sql.Stmt
	getActiveAlertsByNodeAndMetricStmt *sql.Stmt
	getAlertStmt                       *sql.Stmt
	getAlertsStmt                      *sql.Stmt
	getNetStatsStmt                    *sql.Stmt
	getNodeStmt                        *sql.Stmt
	getNodeByIPStmt                    *sql.Stmt
	getNodeDiskInfoByNodeIDStmt        *sql.Stmt
	getNodeSysInfoByNodeIDStmt         *sql.Stmt
	getNodeWithSysInfoStmt             *sql.Stmt
	getNodesStmt                       *sql.Stmt
	getNodesWithSysInfoStmt            *sql.Stmt
	getSystemStatsStmt                 *sql.Stmt
	insertNetStatsStmt                 *sql.Stmt
	insertSystemStatsStmt              *sql.Stmt
	updateAlertStmt                    *sql.Stmt
	updateNodeStmt                     *sql.Stmt
	updateNodeDiskInfoStmt             *sql.Stmt
	updateNodeNameStmt                 *sql.Stmt
	updateNodeSysInfoStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		activateAlertStmt:                  q.activateAlertStmt,
		addNodeDiskInfoStmt:                q.addNodeDiskInfoStmt,
		addNodeSysInfoStmt:                 q.addNodeSysInfoStmt,
		createAlertStmt:                    q.createAlertStmt,
		createNodeStmt:                     q.createNodeStmt,
		createUserStmt:                     q.createUserStmt,
		deactivateAlertStmt:                q.deactivateAlertStmt,
		deleteAlertStmt:                    q.deleteAlertStmt,
		deleteNodeStmt:                     q.deleteNodeStmt,
		findUserByEmailStmt:                q.findUserByEmailStmt,
		findUserByIdStmt:                   q.findUserByIdStmt,
		getActiveAlertsByNodeAndMetricStmt: q.getActiveAlertsByNodeAndMetricStmt,
		getAlertStmt:                       q.getAlertStmt,
		getAlertsStmt:                      q.getAlertsStmt,
		getNetStatsStmt:                    q.getNetStatsStmt,
		getNodeStmt:                        q.getNodeStmt,
		getNodeByIPStmt:                    q.getNodeByIPStmt,
		getNodeDiskInfoByNodeIDStmt:        q.getNodeDiskInfoByNodeIDStmt,
		getNodeSysInfoByNodeIDStmt:         q.getNodeSysInfoByNodeIDStmt,
		getNodeWithSysInfoStmt:             q.getNodeWithSysInfoStmt,
		getNodesStmt:                       q.getNodesStmt,
		getNodesWithSysInfoStmt:            q.getNodesWithSysInfoStmt,
		getSystemStatsStmt:                 q.getSystemStatsStmt,
		insertNetStatsStmt:                 q.insertNetStatsStmt,
		insertSystemStatsStmt:              q.insertSystemStatsStmt,
		updateAlertStmt:                    q.updateAlertStmt,
		updateNodeStmt:                     q.updateNodeStmt,
		updateNodeDiskInfoStmt:             q.updateNodeDiskInfoStmt,
		updateNodeNameStmt:                 q.updateNodeNameStmt,
		updateNodeSysInfoStmt:              q.updateNodeSysInfoStmt,
	}
}
