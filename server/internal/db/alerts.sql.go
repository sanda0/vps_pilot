// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: alerts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const activateAlert = `-- name: ActivateAlert :exec
UPDATE alerts
SET is_active = true
WHERE id = $1
`

func (q *Queries) ActivateAlert(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.activateAlertStmt, activateAlert, id)
	return err
}

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts(
    node_id,
    metric,
    duration,
    threshold,
    net_rece_threshold,
    net_send_threshold,
    email,
    discord_webhook,
    slack_webhook,
    is_active
  )
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
RETURNING id, node_id, metric, duration, threshold, net_rece_threshold, net_send_threshold, email, discord_webhook, slack_webhook, is_active, created_at, updated_at
`

type CreateAlertParams struct {
	NodeID           int32           `json:"node_id"`
	Metric           string          `json:"metric"`
	Duration         int32           `json:"duration"`
	Threshold        sql.NullFloat64 `json:"threshold"`
	NetReceThreshold sql.NullFloat64 `json:"net_rece_threshold"`
	NetSendThreshold sql.NullFloat64 `json:"net_send_threshold"`
	Email            sql.NullString  `json:"email"`
	DiscordWebhook   sql.NullString  `json:"discord_webhook"`
	SlackWebhook     sql.NullString  `json:"slack_webhook"`
	IsActive         sql.NullBool    `json:"is_active"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.queryRow(ctx, q.createAlertStmt, createAlert,
		arg.NodeID,
		arg.Metric,
		arg.Duration,
		arg.Threshold,
		arg.NetReceThreshold,
		arg.NetSendThreshold,
		arg.Email,
		arg.DiscordWebhook,
		arg.SlackWebhook,
		arg.IsActive,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.Metric,
		&i.Duration,
		&i.Threshold,
		&i.NetReceThreshold,
		&i.NetSendThreshold,
		&i.Email,
		&i.DiscordWebhook,
		&i.SlackWebhook,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateAlert = `-- name: DeactivateAlert :exec
UPDATE alerts
SET is_active = false
WHERE id = $1
`

func (q *Queries) DeactivateAlert(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deactivateAlertStmt, deactivateAlert, id)
	return err
}

const deleteAlert = `-- name: DeleteAlert :exec
DELETE FROM alerts
WHERE id = $1
`

func (q *Queries) DeleteAlert(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAlertStmt, deleteAlert, id)
	return err
}

const getActiveAlertsByNodeAndMetric = `-- name: GetActiveAlertsByNodeAndMetric :many
SELECT a.id, a.node_id, a.metric, a.duration, a.threshold, a.net_rece_threshold, a.net_send_threshold, a.email, a.discord_webhook, a.slack_webhook, a.is_active, a.created_at, a.updated_at,n.name as node_name,n.ip as node_ip FROM alerts a
join nodes n on a.node_id = n.id
WHERE node_id = $1 AND metric = $2 AND is_active = true
`

type GetActiveAlertsByNodeAndMetricParams struct {
	NodeID int32  `json:"node_id"`
	Metric string `json:"metric"`
}

type GetActiveAlertsByNodeAndMetricRow struct {
	ID               int32           `json:"id"`
	NodeID           int32           `json:"node_id"`
	Metric           string          `json:"metric"`
	Duration         int32           `json:"duration"`
	Threshold        sql.NullFloat64 `json:"threshold"`
	NetReceThreshold sql.NullFloat64 `json:"net_rece_threshold"`
	NetSendThreshold sql.NullFloat64 `json:"net_send_threshold"`
	Email            sql.NullString  `json:"email"`
	DiscordWebhook   sql.NullString  `json:"discord_webhook"`
	SlackWebhook     sql.NullString  `json:"slack_webhook"`
	IsActive         sql.NullBool    `json:"is_active"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
	NodeName         sql.NullString  `json:"node_name"`
	NodeIp           string          `json:"node_ip"`
}

func (q *Queries) GetActiveAlertsByNodeAndMetric(ctx context.Context, arg GetActiveAlertsByNodeAndMetricParams) ([]GetActiveAlertsByNodeAndMetricRow, error) {
	rows, err := q.query(ctx, q.getActiveAlertsByNodeAndMetricStmt, getActiveAlertsByNodeAndMetric, arg.NodeID, arg.Metric)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveAlertsByNodeAndMetricRow
	for rows.Next() {
		var i GetActiveAlertsByNodeAndMetricRow
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.Metric,
			&i.Duration,
			&i.Threshold,
			&i.NetReceThreshold,
			&i.NetSendThreshold,
			&i.Email,
			&i.DiscordWebhook,
			&i.SlackWebhook,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NodeName,
			&i.NodeIp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlert = `-- name: GetAlert :one
SELECT id, node_id, metric, duration, threshold, net_rece_threshold, net_send_threshold, email, discord_webhook, slack_webhook, is_active, created_at, updated_at FROM alerts
WHERE id = $1
`

func (q *Queries) GetAlert(ctx context.Context, id int32) (Alert, error) {
	row := q.queryRow(ctx, q.getAlertStmt, getAlert, id)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.Metric,
		&i.Duration,
		&i.Threshold,
		&i.NetReceThreshold,
		&i.NetSendThreshold,
		&i.Email,
		&i.DiscordWebhook,
		&i.SlackWebhook,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAlerts = `-- name: GetAlerts :many
SELECT id, node_id, metric, duration, threshold, net_rece_threshold, net_send_threshold, email, discord_webhook, slack_webhook, is_active, created_at, updated_at FROM alerts
WHERE node_id = $1
LIMIT $2 OFFSET $3
`

type GetAlertsParams struct {
	NodeID int32 `json:"node_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAlerts(ctx context.Context, arg GetAlertsParams) ([]Alert, error) {
	rows, err := q.query(ctx, q.getAlertsStmt, getAlerts, arg.NodeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.Metric,
			&i.Duration,
			&i.Threshold,
			&i.NetReceThreshold,
			&i.NetSendThreshold,
			&i.Email,
			&i.DiscordWebhook,
			&i.SlackWebhook,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlert = `-- name: UpdateAlert :one
UPDATE alerts
SET node_id = $2,
  metric = $3,
  duration = $4,
  threshold = $5,
  net_rece_threshold = $6,
  net_send_threshold = $7,
  email = $8,
  discord_webhook = $9,
  slack_webhook = $10,
  is_active = $11
WHERE id = $1
RETURNING id, node_id, metric, duration, threshold, net_rece_threshold, net_send_threshold, email, discord_webhook, slack_webhook, is_active, created_at, updated_at
`

type UpdateAlertParams struct {
	ID               int32           `json:"id"`
	NodeID           int32           `json:"node_id"`
	Metric           string          `json:"metric"`
	Duration         int32           `json:"duration"`
	Threshold        sql.NullFloat64 `json:"threshold"`
	NetReceThreshold sql.NullFloat64 `json:"net_rece_threshold"`
	NetSendThreshold sql.NullFloat64 `json:"net_send_threshold"`
	Email            sql.NullString  `json:"email"`
	DiscordWebhook   sql.NullString  `json:"discord_webhook"`
	SlackWebhook     sql.NullString  `json:"slack_webhook"`
	IsActive         sql.NullBool    `json:"is_active"`
}

func (q *Queries) UpdateAlert(ctx context.Context, arg UpdateAlertParams) (Alert, error) {
	row := q.queryRow(ctx, q.updateAlertStmt, updateAlert,
		arg.ID,
		arg.NodeID,
		arg.Metric,
		arg.Duration,
		arg.Threshold,
		arg.NetReceThreshold,
		arg.NetSendThreshold,
		arg.Email,
		arg.DiscordWebhook,
		arg.SlackWebhook,
		arg.IsActive,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.Metric,
		&i.Duration,
		&i.Threshold,
		&i.NetReceThreshold,
		&i.NetSendThreshold,
		&i.Email,
		&i.DiscordWebhook,
		&i.SlackWebhook,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
